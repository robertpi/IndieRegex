open System.IO
open System.Xml.Linq

let source = Path.Combine(__SOURCE_DIRECTORY__, "../src/SR.resx")
let target = Path.Combine(__SOURCE_DIRECTORY__, "../src/SR.g.cs")

let xn = XName.op_Implicit

let getDataPair (node: XNode) =
    match node with
    | :? XElement as elem ->
        if elem.Name = xn "data" then
            let nameAttrib = elem.Attributes() |> Seq.head
            let textNode = elem.Nodes() |> Seq.choose (fun x -> match x with :? XElement as e -> Some e | _ -> None) |> Seq.head
            Some (nameAttrib.Value, textNode.Value)
        else
            None
    | _ -> None

let resx =
    let doc = XDocument.Load(source)
    doc.Root.Nodes()
    |> Seq.choose getDataPair

let header =
    """//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace IndieSystem.Text.RegularExpressions;

using System;


/// <summary>
///   A strongly-typed class, for hardcode messages
/// </summary>
internal partial class SR
{
"""
let footer = """
}
"""


let output() =
    use out = File.Open(target, FileMode.Create)
    use sw = new StreamWriter(out)

    sw.WriteLine(header)

    for (key, text) in resx do
        let escapedText = text.Replace("\"", "\"\"")
        sw.WriteLine($"    public const string {key} = @\"{escapedText}\";")

    sw.WriteLine(footer)

output()